
## Récupération du projet depuis le repos (2 etapes)
    # Et1 : se positionner sur le bon dossier ou en veut mettre le projet cloné :
        cd ..p/dossier-du-projet
    # Et2 :  lancer le clone [clone]:
        git clone git@gitlab.domaine.xxx.zzz/le-projet-en-repos.git
        git clone https://github.com/younesh/tests-web.git  /* exemple */

## creer une nouvel branche br-B a partir d'une branche br-A ( 3 etape ) 
    # et1 : se positionner sur la branche br-A [checkout]
        git checkout br-A 
    # et2 : mettre à jour la br-A avec sa remote branche [pull]
        git pull
        /* ou */
        git pull origin  br-A   /* sa remote */
    # et3 : creer la br-B a partir de la br-A  [checkout -b]:
        git checkout -b br-B


## voir le status du versionning : fichier modifies, fichier ajouté au  git ....
    git status

## ajouter des modifs au git en tant que modifs en attente de commit
    # cas1 : ajouter une modif d'un fichier [add]
        git add ../path/../file
    # cas2 ajouter tous les modifs avec le point [add . ]
        git add .

## pour voir les différence entre les modifs non comité et modif le remote [diff]
    git diff  ../path/../file
    git diff  /* pour voir tous les diff sur tous les fichier */

## faire un commit [commit -m ]: 
    git commit -m "le message du commite"

## ajouter/corriger des petites modifs oublié à un commit déja crée [--amend ]: 
  a. en peut ajouter des petites modifs a un commit sans modifier sans message/commentaire initia : 
     git commit --amend
  b. en peut corriger ausssi le commentaire initial en plus des modification : 
     git commit --amend -m "new comment fixed ... !!"


## pour pusher les commites au serveur ( remote ) [push -u origin]
    git push -u origin nom-de-branch-cible

## pour revert vers la version du remote [checkout -- [...]]  ou [ revert -- [....]]
    # cas revert tous les modif
        git checkout -- nom-file
    # revenir a l'etat du remot actuelle , annuller tous les modif en cours ( attention les modif non pushé sont perdu)
        git reset --hard
    # 

## lister les branches qui sont ds mon repo :
    git branch

## supprimer les branches : 
    # supprimer la branche local : 
        git branch -d [nom_de_la_branche]    // avec le '-d' il te mettra un avertissement
        git branch -D [nom_de_la_branche]    // avec le '-D' il supprime directement 
    # supprimer la branche distante : 
        git push origin :[nom_de_la_branche]



## (!) Doc a ajouter : { push -- forece with lease /  les cas resolve conflit en merge / .... / }

## (!) ajouter l'équivalant du "merge-into" en commandes ( merge-into de la branche destination du merge request ( exple :develop ou master) vers la branch du travail )


> conclusion :
    ds le même fichier  si les modif ne concerne pas les même ligne la modification passe sans probleme, et le merge est auto sans conflit

les etapes pour merger une branch br-dev0x (créer depuis master) dans master 7 etapes 

1.0 commiter/pusher toutes les modification sur br-dev0x
    1.1 (optionnel mais recommandé): squatcher tous vous commit sur la branche br-dev0x( factoriser dans un seule commit )
2. mettre a jour le master
    2.1 checkout master
    2.2 pull
3. revenir au br-dev0x et rebaser le master dessus
    3.1 chekout br-dev0x
    3.2 rebase master
4. gestion des conflit 
    4.1 ds votre editeur vs code, gérer tous vos conflits <<<<<<<<< head ... 
    4.2 git add [liste_files_resolved]
    4.3 git rebase --continue
    4.4 si autre conflit , revenir a l'etap 4.1 et ainsi de suite...
5. pusher ce que vous avez resolu sur br-dev0x
    5.1 $ git push --force-with-lease origin br-dev0x
6. revenir au master et merger br-dev0x dessus 
    6.1 $ git checkout master
    6.2 $ git merge br-dev0x
7. pusher le master apers le merge
    7.1 $ git push [(?)force with lease] origin master
    